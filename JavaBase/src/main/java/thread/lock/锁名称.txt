共享锁:读锁 Semaphore / 独享锁:ReentrantLock
公平锁:拿不到锁的进程排在等待队列中，等待叫号。/非公平锁:拿不到锁的进程，也排在队列中，但是锁会有一定就近原则。
互斥锁：synchronized完全互斥/读写锁:读锁同步，写锁互斥。
乐观锁：CAS(Compare And Swap) 要去拉屎的时候看看坑位有人没当前能不能拉 /悲观锁：厕所外面门就锁着，直接隔绝。
分段锁：Segment ConcurrentHashMap 一个数组，每一个数组元素是一个链表，每个链表是一个Segment，当两个线程操作这个链表时候才有互斥反应，对于不影响的链表，不存在互斥，互不相干。
锁的状态：偏向锁/轻量级锁/重量级锁：java对象头中有个偏向标识，一个对象资源，a线程现在在使用，对象资源上标有偏向a线程，a线程再次访问资源就非常迅速，此时是偏向锁；如果此时线程b也访问，它没访问到，进入到自旋等待，此时升级为轻量级锁；
当b线程自旋到一定时间，还没获取到，其进入阻塞，此时锁升级为重量级锁。
自旋锁: 减少线程上下文切换消耗，但是循环等待，增加cpu消耗。
